[{"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/index.tsx":"1","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/reportWebVitals.ts":"2","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/App.tsx":"3","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/Home.tsx":"4","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/connection.tsx":"5","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/candy-machine.ts":"6","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/utils.ts":"7","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/MintCountdown.tsx":"8","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx":"9","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/Header.js":"10","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/Team.js":"11"},{"size":502,"mtime":1653096080999,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1653096080999,"results":"14","hashOfConfig":"13"},{"size":3131,"mtime":1653360322923,"results":"15","hashOfConfig":"13"},{"size":26076,"mtime":1653242948828,"results":"16","hashOfConfig":"13"},{"size":15005,"mtime":1653096080998,"results":"17","hashOfConfig":"13"},{"size":16532,"mtime":1653096080998,"results":"18","hashOfConfig":"13"},{"size":3236,"mtime":1653096081000,"results":"19","hashOfConfig":"13"},{"size":2710,"mtime":1653096080997,"results":"20","hashOfConfig":"13"},{"size":4947,"mtime":1653096080997,"results":"21","hashOfConfig":"13"},{"size":1073,"mtime":1653257036686,"results":"22","hashOfConfig":"13"},{"size":7015,"mtime":1653360524851,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ggsh0z",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/index.tsx",[],["51","52"],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/reportWebVitals.ts",[],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/App.tsx",["53"],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/Home.tsx",["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76"],"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {Header} from './Header.js';\nimport {Team} from './Team.js'\n\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint,\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                'There was a problem fetching whitelist token balance',\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable,\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <div>\n      <Header/>\n      <Team/>\n\n      {/* <Container>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingTop: 0,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={\n                      props.network === WalletAdapterNetwork.Devnet\n                        ? 'https://api.devnet.solana.com'\n                        : rpcUrl\n                    }\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Ready to Ball Out?\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container> */}\n    </div>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/connection.tsx",[],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/candy-machine.ts",[],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/utils.ts",[],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/MintCountdown.tsx",[],["77","78"],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx",[],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/Header.js",["79","80","81"],"import './Header.css';\nimport React from 'react';\nimport twitter from './socials/Twitter.svg';\nimport discord from './socials/Discord.svg';\n\nexport const Header = () => {\n    return (\n      <body>\n        <nav class=\"navbar\">\n          <div class=\"navbar-container container\">\n            <input type=\"checkbox\" name=\"\" id=\"\" />\n            <div class=\"hamburger-lines\">\n              <span class=\"line line1\"></span>\n              <span class=\"line line2\"></span>\n              <span class=\"line line3\"></span>\n            </div>\n            <ul class=\"menu-items\">\n              <li><a href=\"/home\">Gallery</a></li>\n              <li><a href=\"/team\">Team</a></li>\n              <li><a href=\"/roadmap\">Game Plan</a></li>\n              <li><a href=\"https://twitter.com/BallerSociety_\"><img src={twitter} className=\"social-logo\"></img></a></li>\n              <li><a href=\"\"><img src={discord} className=\"social-logo\"></img></a></li>\n            </ul>           \n            <h1 class=\"logo\">THE BALLER SOCIETY</h1>\n          </div>\n        </nav>\n      </body>  \n    );\n  };",["82","83"],"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/Team.js",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":80,"column":7,"nodeType":"121","messageId":"122","endLine":80,"endColumn":11},{"ruleId":"119","severity":1,"message":"123","line":5,"column":10,"nodeType":"121","messageId":"122","endLine":5,"endColumn":19},{"ruleId":"119","severity":1,"message":"124","line":5,"column":21,"nodeType":"121","messageId":"122","endLine":5,"endColumn":29},{"ruleId":"119","severity":1,"message":"125","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":13},{"ruleId":"119","severity":1,"message":"126","line":7,"column":8,"nodeType":"121","messageId":"122","endLine":7,"endColumn":13},{"ruleId":"119","severity":1,"message":"127","line":8,"column":8,"nodeType":"121","messageId":"122","endLine":8,"endColumn":12},{"ruleId":"119","severity":1,"message":"128","line":9,"column":8,"nodeType":"121","messageId":"122","endLine":9,"endColumn":18},{"ruleId":"119","severity":1,"message":"129","line":13,"column":3,"nodeType":"121","messageId":"122","endLine":13,"endColumn":12},{"ruleId":"119","severity":1,"message":"130","line":20,"column":3,"nodeType":"121","messageId":"122","endLine":20,"endColumn":24},{"ruleId":"119","severity":1,"message":"131","line":28,"column":22,"nodeType":"121","messageId":"122","endLine":28,"endColumn":34},{"ruleId":"119","severity":1,"message":"132","line":29,"column":10,"nodeType":"121","messageId":"122","endLine":29,"endColumn":23},{"ruleId":"119","severity":1,"message":"133","line":30,"column":10,"nodeType":"121","messageId":"122","endLine":30,"endColumn":20},{"ruleId":"119","severity":1,"message":"134","line":31,"column":10,"nodeType":"121","messageId":"122","endLine":31,"endColumn":25},{"ruleId":"119","severity":1,"message":"135","line":32,"column":10,"nodeType":"121","messageId":"122","endLine":32,"endColumn":25},{"ruleId":"119","severity":1,"message":"136","line":38,"column":7,"nodeType":"121","messageId":"122","endLine":38,"endColumn":20},{"ruleId":"119","severity":1,"message":"137","line":49,"column":7,"nodeType":"121","messageId":"122","endLine":49,"endColumn":20},{"ruleId":"119","severity":1,"message":"138","line":60,"column":10,"nodeType":"121","messageId":"122","endLine":60,"endColumn":23},{"ruleId":"119","severity":1,"message":"139","line":62,"column":10,"nodeType":"121","messageId":"122","endLine":62,"endColumn":20},{"ruleId":"119","severity":1,"message":"140","line":72,"column":10,"nodeType":"121","messageId":"122","endLine":72,"endColumn":24},{"ruleId":"119","severity":1,"message":"141","line":73,"column":10,"nodeType":"121","messageId":"122","endLine":73,"endColumn":23},{"ruleId":"119","severity":1,"message":"142","line":77,"column":9,"nodeType":"121","messageId":"122","endLine":77,"endColumn":15},{"ruleId":"119","severity":1,"message":"143","line":295,"column":9,"nodeType":"121","messageId":"122","endLine":295,"endColumn":15},{"ruleId":"119","severity":1,"message":"144","line":441,"column":9,"nodeType":"121","messageId":"122","endLine":441,"endColumn":25},{"ruleId":"119","severity":1,"message":"145","line":734,"column":7,"nodeType":"121","messageId":"122","endLine":734,"endColumn":23},{"ruleId":"115","replacedBy":"146"},{"ruleId":"117","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":21,"column":64,"nodeType":"150","endLine":21,"endColumn":107},{"ruleId":"151","severity":1,"message":"152","line":22,"column":19,"nodeType":"150","endLine":22,"endColumn":30},{"ruleId":"148","severity":1,"message":"149","line":22,"column":30,"nodeType":"150","endLine":22,"endColumn":73},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":8,"nodeType":"121","messageId":"122","endLine":1,"endColumn":14},{"ruleId":"153","severity":1,"message":"155","line":2,"column":8,"nodeType":"121","messageId":"122","endLine":2,"endColumn":14},{"ruleId":"153","severity":1,"message":"156","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":29},{"ruleId":"153","severity":1,"message":"157","line":4,"column":10,"nodeType":"121","messageId":"122","endLine":4,"endColumn":26},{"ruleId":"153","severity":1,"message":"158","line":5,"column":10,"nodeType":"121","messageId":"122","endLine":5,"endColumn":23},{"ruleId":"153","severity":1,"message":"159","line":5,"column":25,"nodeType":"121","messageId":"122","endLine":5,"endColumn":35},{"ruleId":"153","severity":1,"message":"160","line":6,"column":10,"nodeType":"121","messageId":"122","endLine":6,"endColumn":19},{"ruleId":"153","severity":1,"message":"161","line":6,"column":21,"nodeType":"121","messageId":"122","endLine":6,"endColumn":29},{"ruleId":"153","severity":1,"message":"162","line":6,"column":31,"nodeType":"121","messageId":"122","endLine":6,"endColumn":37},{"ruleId":"153","severity":1,"message":"163","line":7,"column":10,"nodeType":"121","messageId":"122","endLine":7,"endColumn":23},{"ruleId":"153","severity":1,"message":"164","line":7,"column":25,"nodeType":"121","messageId":"122","endLine":7,"endColumn":34},{"ruleId":"153","severity":1,"message":"165","line":9,"column":3,"nodeType":"121","messageId":"122","endLine":9,"endColumn":19},{"ruleId":"153","severity":1,"message":"166","line":10,"column":3,"nodeType":"121","messageId":"122","endLine":10,"endColumn":53},{"ruleId":"153","severity":1,"message":"167","line":11,"column":3,"nodeType":"121","messageId":"122","endLine":11,"endColumn":23},{"ruleId":"153","severity":1,"message":"168","line":12,"column":3,"nodeType":"121","messageId":"122","endLine":12,"endColumn":30},{"ruleId":"153","severity":1,"message":"169","line":17,"column":8,"nodeType":"121","messageId":"122","endLine":17,"endColumn":15},{"ruleId":"153","severity":1,"message":"170","line":25,"column":8,"nodeType":"121","messageId":"122","endLine":25,"endColumn":16},{"ruleId":"153","severity":1,"message":"171","line":26,"column":8,"nodeType":"121","messageId":"122","endLine":26,"endColumn":17},{"ruleId":"153","severity":1,"message":"172","line":27,"column":8,"nodeType":"121","messageId":"122","endLine":27,"endColumn":16},{"ruleId":"153","severity":1,"message":"173","line":28,"column":8,"nodeType":"121","messageId":"122","endLine":28,"endColumn":16},{"ruleId":"153","severity":1,"message":"174","line":29,"column":8,"nodeType":"121","messageId":"122","endLine":29,"endColumn":19},{"ruleId":"148","severity":1,"message":"149","line":58,"column":60,"nodeType":"150","endLine":58,"endColumn":111},{"ruleId":"148","severity":1,"message":"149","line":59,"column":21,"nodeType":"150","endLine":59,"endColumn":53},{"ruleId":"148","severity":1,"message":"149","line":67,"column":62,"nodeType":"150","endLine":67,"endColumn":113},{"ruleId":"148","severity":1,"message":"149","line":68,"column":21,"nodeType":"150","endLine":68,"endColumn":54},{"ruleId":"148","severity":1,"message":"149","line":75,"column":62,"nodeType":"150","endLine":75,"endColumn":113},{"ruleId":"148","severity":1,"message":"149","line":76,"column":21,"nodeType":"150","endLine":76,"endColumn":53},{"ruleId":"148","severity":1,"message":"149","line":84,"column":64,"nodeType":"150","endLine":84,"endColumn":115},{"ruleId":"148","severity":1,"message":"149","line":85,"column":21,"nodeType":"150","endLine":85,"endColumn":53},{"ruleId":"148","severity":1,"message":"149","line":93,"column":64,"nodeType":"150","endLine":93,"endColumn":115},{"ruleId":"148","severity":1,"message":"149","line":94,"column":21,"nodeType":"150","endLine":94,"endColumn":56},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"@typescript-eslint/no-unused-vars","'Apps' is assigned a value but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Snackbar' is defined but never used.","'Paper' is defined but never used.","'Alert' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'PublicKey' is defined but never used.","'CANDY_MACHINE_PROGRAM' is defined but never used.","'formatNumber' is defined but never used.","'MintCountdown' is defined but never used.","'MintButton' is defined but never used.","'GatewayProvider' is defined but never used.","'sendTransaction' is defined but never used.","'ConnectButton' is assigned a value but never used.","'MintContainer' is assigned a value but never used.","'isUserMinting' is assigned a value but never used.","'alertState' is assigned a value but never used.","'isValidBalance' is assigned a value but never used.","'discountPrice' is assigned a value but never used.","'rpcUrl' is assigned a value but never used.","'onMint' is assigned a value but never used.","'toggleMintButton' is assigned a value but never used.","'getCountdownDate' is assigned a value but never used.",["175"],["176"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-unused-vars","'styled' is defined but never used.","'Button' is defined but never used.","'CandyMachineAccount' is defined but never used.","'CircularProgress' is defined but never used.","'GatewayStatus' is defined but never used.","'useGateway' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'useConnection' is defined but never used.","'useWallet' is defined but never used.","'findGatewayToken' is defined but never used.","'getGatewayTokenAddressForOwnerAndGatekeeperNetwork' is defined but never used.","'onGatewayTokenChange' is defined but never used.","'removeAccountChangeListener' is defined but never used.","'discord' is defined but never used.","'Jack_pfp' is defined but never used.","'Jorge_pfp' is defined but never used.","'Nyla_pfp' is defined but never used.","'Matt_pfp' is defined but never used.","'Charles_pfp' is defined but never used.","no-global-assign","no-unsafe-negation"]