{"ast":null,"code":"var _jsxFileName = \"/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/App.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolletWallet, getSolletExtensionWallet } from '@solana/wallet-adapter-wallets';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { createTheme } from '@material-ui/core';\n// import Home from './Home';\nimport Home from './Home';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    type: 'dark'\n  }\n});\n\nconst getCandyMachineId = () => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID);\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\nconst connection = new anchor.web3.Connection(rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'));\n\nconst App = () => {\n  _s();\n\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSlopeWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  })], []); // let routes = useRoutes([\n  //   { path: \"/\", element: <Home/>},\n  //   { path: \"/home\", element: <Home/> },\n  //   { path: \"/team\", element: <Team/> },\n  //   // { path: \"/roadmap\", element: <Roadmap/> },\n  //   // { path: \"/gallery\", element: <Gallery/>},\n  // ]);\n  // return routes;\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n      endpoint: endpoint,\n      children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: wallets,\n        autoConnect: true,\n        children: /*#__PURE__*/_jsxDEV(WalletDialogProvider, {\n          children: /*#__PURE__*/_jsxDEV(Home, {\n            candyMachineId: candyMachineId,\n            connection: connection,\n            txTimeout: DEFAULT_TIMEOUT,\n            rpcHost: rpcHost,\n            network: network\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = App;\n\nconst AppWrapper = () => {\n  _s2();\n\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSlopeWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  })], []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AppWrapper, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c2 = AppWrapper;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppWrapper\");","map":{"version":3,"sources":["/Users/jackretterer/metaplex/js/packages/candy-machine-ui/src/App.tsx"],"names":["useMemo","anchor","DEFAULT_TIMEOUT","clusterApiUrl","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","WalletDialogProvider","createTheme","Home","BrowserRouter","Router","theme","palette","type","getCandyMachineId","candyMachineId","web3","PublicKey","process","env","REACT_APP_CANDY_MACHINE_ID","e","console","log","undefined","network","REACT_APP_SOLANA_NETWORK","rpcHost","REACT_APP_SOLANA_RPC_HOST","connection","Connection","App","endpoint","wallets","AppWrapper"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\nimport {Team} from './Team.js';\n// import Home from './Home';\nimport Home from './Home';\n\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n    // let routes = useRoutes([\n    //   { path: \"/\", element: <Home/>},\n    //   { path: \"/home\", element: <Home/> },\n    //   { path: \"/team\", element: <Team/> },\n    //   // { path: \"/roadmap\", element: <Roadmap/> },\n    //   // { path: \"/gallery\", element: <Gallery/>},\n    // ]);\n    // return routes;\n    return (\n      <Router>\n          <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} autoConnect>\n              <WalletDialogProvider>\n                <Home\n                  candyMachineId={candyMachineId}\n                  connection={connection}\n                  txTimeout={DEFAULT_TIMEOUT}\n                  rpcHost={rpcHost}\n                  network={network}\n                />\n              </WalletDialogProvider>\n            </WalletProvider>\n          </ConnectionProvider>\n      </Router>\n    );\n};\n\nconst AppWrapper = () => {\n\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <Router>\n      <App/>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}